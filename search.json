[{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/articles/MetaboCoreUtils.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Core Utils for Metabolomics Data","text":"MetaboCoreUtils defines metabolomics-related core functionality provided low-level functions allow data structure-independent usage across various R packages (Rainer et al. 2022). includes functions calculate ion (adduct) compound mass--charge ratios masses functions work chemical formulas. package provides also set adduct definitions information commercially available internal standard mixes commonly used MS experiments. full list function, see reference page package webpage.","code":"library(\"MetaboCoreUtils\") ls(pos = \"package:MetaboCoreUtils\") ##  [1] \"addElements\"                \"adductFormula\"              ##  [3] \"adductNames\"                \"adducts\"                    ##  [5] \"calculateKm\"                \"calculateKmd\"               ##  [7] \"calculateMass\"              \"calculateRkmd\"              ##  [9] \"containsElements\"           \"convertMtime\"               ## [11] \"correctRindex\"              \"countElements\"              ## [13] \"formula2mz\"                 \"indexRtime\"                 ## [15] \"internalStandardMixNames\"   \"internalStandards\"          ## [17] \"isotopicSubstitutionMatrix\" \"isotopologues\"              ## [19] \"isRkmd\"                     \"mass2mz\"                    ## [21] \"multiplyElements\"           \"mz2mass\"                    ## [23] \"pasteElements\"              \"standardizeFormula\"         ## [25] \"subtractElements\""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/articles/MetaboCoreUtils.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Core Utils for Metabolomics Data","text":"package can installed BiocManager package. install BiocManager use install.packages(\"BiocManager\") , , BiocManager::install(\"MetaboCoreUtils\") install package.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/articles/MetaboCoreUtils.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Core Utils for Metabolomics Data","text":"functions defined package utilise basic classes aim reused packages provide formal, high-level interface. examples demonstrate basic usage functions package.","code":"library(MetaboCoreUtils)"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/articles/MetaboCoreUtils.html","id":"conversion-between-ion-mz-and-compound-masses","dir":"Articles","previous_headings":"Examples","what":"Conversion between ion m/z and compound masses","title":"Core Utils for Metabolomics Data","text":"mass2mz mz2mass functions allow convert compound masses ion (adduct) mass--charge ratios (m/z). MetaboCoreUtils package provides definitions common ion adducts generated electrospray ionization (ESI). can listed adductNames function. can use mass2mz function calculate m/z set compounds assuming generation certain ions. example define masses theoretical compounds calculate expected m/z assuming ions \"[M+H]+\" \"[M+Na]+\" generated. result get matrix row representing one compound column m/z one defined adducts. mz2mass perform reverse calculation, .e. m/z compound masses. addition, possible calculate m/z values chemical formulas formula2mz function. calculate m/z values [M+H]+ [M+Na]+ adducts chemical formulas glucose caffeine.","code":"adductNames() ##  [1] \"[M+3H]3+\"          \"[M+2H+Na]3+\"       \"[M+H+Na2]3+\"       ##  [4] \"[M+Na3]3+\"         \"[M+2H]2+\"          \"[M+H+NH4]2+\"       ##  [7] \"[M+H+K]2+\"         \"[M+H+Na]2+\"        \"[M+C2H3N+2H]2+\"    ## [10] \"[M+2Na]2+\"         \"[M+C4H6N2+2H]2+\"   \"[M+C6H9N3+2H]2+\"   ## [13] \"[M+H]+\"            \"[M+Li]+\"           \"[M+2Li-H]+\"        ## [16] \"[M+NH4]+\"          \"[M+H2O+H]+\"        \"[M+Na]+\"           ## [19] \"[M+CH4O+H]+\"       \"[M+K]+\"            \"[M+C2H3N+H]+\"      ## [22] \"[M+2Na-H]+\"        \"[M+C3H8O+H]+\"      \"[M+C2H3N+Na]+\"     ## [25] \"[M+2K-H]+\"         \"[M+C2H6OS+H]+\"     \"[M+C4H6N2+H]+\"     ## [28] \"[2M+H]+\"           \"[2M+NH4]+\"         \"[2M+Na]+\"          ## [31] \"[2M+K]+\"           \"[2M+C2H3N+H]+\"     \"[2M+C2H3N+Na]+\"    ## [34] \"[3M+H]+\"           \"[M+H-NH3]+\"        \"[M+H-H2O]+\"        ## [37] \"[M+H-Hexose-H2O]+\" \"[M+H-H4O2]+\"       \"[M+H-CH2O2]+\"      ## [40] \"[M]+\" masses <- c(123, 842, 324) mass2mz(masses, adduct = c(\"[M+H]+\", \"[M+Na]+\")) ##        [M+H]+  [M+Na]+ ## [1,] 124.0073 145.9892 ## [2,] 843.0073 864.9892 ## [3,] 325.0073 346.9892 formula2mz(c(\"C6H12O6\", \"C8H10N4O2\"), adduct = c(\"[M+H]+\", \"[M+Na]+\")) ##             [M+H]+  [M+Na]+ ## C6H12O6   181.0707 203.0526 ## C8H10N4O2 195.0877 217.0696"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/articles/MetaboCoreUtils.html","id":"working-with-chemical-formulas","dir":"Articles","previous_headings":"Examples","what":"Working with chemical formulas","title":"Core Utils for Metabolomics Data","text":"lack consistency format chemical formulas written poses big problem comparing formulas coming different resources. MetaboCoreUtils package provides functions standardize formulas well combine formulas substract elements formulas. use artificial example show functionality. First standardize chemical formula standardizeFormula function. Next add \"H2O\" formula using addElements function. can also substract elements subtractElements function: Chemical formulas also multiplied scalar using multiplyElements function. counts individual elements chemical formula can calculated countElements function. function adductFormula allows addition create chemical formulas specific adducts compounds. create chemical formulas [M+H]+ [M+Na]+ adducts glucose caffeine.","code":"frml <- \"Na3C4\" frml <- standardizeFormula(frml) frml ##   Na3C4  ## \"C4Na3\" frml <- addElements(frml, \"H2O\") frml ## [1] \"C4H2ONa3\" frml <- subtractElements(frml, \"H\") frml ## [1] \"C4HONa3\" countElements(frml) ## $C4HONa3 ##  C  H  O Na  ##  4  1  1  3 adductFormula(c(\"C6H12O6\", \"C8H10N4O2\"), adduct = c(\"[M+H]+\", \"[M+Na]+\")) ##           [M+H]+         [M+Na]+          ## C6H12O6   \"[C6H13O6]+\"   \"[C6H12O6Na]+\"   ## C8H10N4O2 \"[C8H11N4O2]+\" \"[C8H10N4O2Na]+\""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/articles/MetaboCoreUtils.html","id":"kendrick-mass-defect-calculation","dir":"Articles","previous_headings":"Examples","what":"Kendrick mass defect calculation","title":"Core Utils for Metabolomics Data","text":"Lipids homologous series based fatty acyls can found data using Kendrick mass defects (KMD) referenced kendrick mass defects (RKMD). MetaboCoreUtils package provides functions calculate everything around Kendrick mass defects. following example calculates KMD RKMD three lipids (PC(16:0/18:1(9Z)), PC(16:0/18:0), PS(16:0/18:1(9Z))) checks, fit RKMD PCs detected [M+H]+ adducts. Next RKMD calculated checked fits specific range. RKMDs either 0 negative integers according number double bonds lipids, e.g. -2 two double bonds present lipids.","code":"lipid_masses <- c(760.5851, 762.6007, 762.5280) calculateKmd(lipid_masses) ## [1] 0.7358239 0.7491732 0.6765544 lipid_rkmd <- calculateRkmd(lipid_masses) isRkmd(lipid_rkmd) ## [1]  TRUE  TRUE FALSE"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/articles/MetaboCoreUtils.html","id":"retetion-time-indexing","dir":"Articles","previous_headings":"Examples","what":"Retetion time indexing","title":"Core Utils for Metabolomics Data","text":"Retention times often directly comparable two LC-MS systems, even nominally separation method used. Conversion retention times retetion indices can overcome issue. MetaboCoreUtils package provides function perform conversion. use example based indexing homologoues series af N-Alkyl-pyridinium sulfonates (NAPS). data.frame retetion times NAPS respective index value required. indexing peformed using function indexRtime. comparison manual calculated retention indices included. Conditions shall compared retention index might perfectly match. case deviation linear simple two-point correction can applied data. performed function correctRindex. correction requires two reference standards measured RIs reference RIs.","code":"rti <- read.table(system.file(\"retentionIndex\",                               \"rti.txt\",                               package = \"MetaboCoreUtils\"),                   header = TRUE,                   sep = \"\\t\")  rtime <- read.table(system.file(\"retentionIndex\",                                 \"metabolites.txt\",                                 package = \"MetaboCoreUtils\"),                     header = TRUE,                     sep = \"\\t\") head(rti) ##   rtime rindex ## 1  1.14    100 ## 2  1.18    200 ## 3  1.38    300 ## 4  2.11    400 ## 5  4.34    500 ## 6  5.92    600 rtime$rindex_r <- indexRtime(rtime$rtime, rti) head(rtime) ##                name rtime rindex_manual  rindex_r ## 1        VITAMIN D2    NA            NA        NA ## 2          SQUALENE 15.66     1709.8765 1709.8765 ## 3       4-COUMARATE  6.26      629.3103  629.3103 ## 4         NONANOATE 11.73     1244.5783 1244.5783 ## 5 ESTRADIOL-17ALPHA 10.27     1065.4321 1065.4321 ## 6         CAPRYLATE 10.67     1114.8148 1114.8148 ref <- data.frame(rindex = c(1709.8765, 553.7975),                   refindex = c(1700, 550))  rtime$rindex_cor <- correctRindex(rtime$rindex_r, ref)"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/articles/MetaboCoreUtils.html","id":"contributions","dir":"Articles","previous_headings":"","what":"Contributions","title":"Core Utils for Metabolomics Data","text":"like contribute low-level functionality, please open GitHub issue discuss . Please note contributions follow style guide require appropriate unit test. wish reuse functions package, please just go ahead. like advice seek help, please either open GitHub issue.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/articles/MetaboCoreUtils.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Core Utils for Metabolomics Data","text":"","code":"## R version 4.3.1 (2023-06-16) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.2 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] MetaboCoreUtils_1.9.2 BiocStyle_2.29.1      ##  ## loaded via a namespace (and not attached): ##  [1] jsonlite_1.8.7        compiler_4.3.1        BiocManager_1.30.21.1 ##  [4] stringr_1.5.0         cluster_2.1.4         jquerylib_0.1.4       ##  [7] systemfonts_1.0.4     textshaping_0.3.6     yaml_2.3.7            ## [10] fastmap_1.1.1         R6_2.5.1              knitr_1.43            ## [13] BiocGenerics_0.47.0   MASS_7.3-60           bookdown_0.34         ## [16] desc_1.4.2            rprojroot_2.0.3       bslib_0.5.0           ## [19] rlang_1.1.1           cachem_1.0.8          stringi_1.7.12        ## [22] xfun_0.39             fs_1.6.3              MsCoreUtils_1.13.1    ## [25] sass_0.4.7            memoise_2.0.1         cli_3.6.1             ## [28] pkgdown_2.0.7.9000    magrittr_2.0.3        digest_0.6.33         ## [31] lifecycle_1.0.3       clue_0.3-64           S4Vectors_0.39.1      ## [34] vctrs_0.6.3           evaluate_0.21         glue_1.6.2            ## [37] ragg_1.2.5            stats4_4.3.1          rmarkdown_2.23        ## [40] purrr_1.0.1           tools_4.3.1           htmltools_0.5.5"},{"path":[]},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Johannes Rainer. Author, maintainer. Michael Witting. Author. Andrea Vicini. Author. Liesa Salzer. Contributor. Sebastian Gibb. Contributor. Michael Stravs. Contributor. Roger Gine. Author.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rainer J, Vicini , Salzer L, Stanstrup J, Badia JM, Neumann S, Stravs MA, Verri Hernandes V, Gatto L, Gibb S Wittin M. Modular Expandable Ecosystem Metabolomics Data Annotation R Metabolites 2022, 12, 173. https://doi.org/10.3390/metabo12020173","code":"@Article{,   title = {A Modular and Expandable Ecosystem for Metabolomics Data Annotation in R},   author = {Johannes Rainer and Andrea Vicini and Liesa Salzer and Jan Stanstrup and Josep M. Badia and Steffen Neumann and Michael A. Stravs and Vinicius {Verri Hernandes} and Laurent Gatto and Sebastian Gibb and Michael Witting},   journal = {Metabolites},   year = {2022},   doi = {10.3390/metabo12020173},   url = {https://www.mdpi.com/2218-1989/12/2/173},   volume = {12},   pages = {173}, }"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/index.html","id":"low-level-functions-for-metabolomics-data","dir":"","previous_headings":"","what":"Core Utils for Metabolomics Data","title":"Core Utils for Metabolomics Data","text":"MetaboCoreUtils defines metabolomics-related core functionality provided low-level functions allow data structure-independent usage across various R packages. information see package homepage.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Core Utils for Metabolomics Data","text":"package can installed ","code":"install.packages(\"BiocManager\") BiocManager::install(\"MetaboCoreUtils\")"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/index.html","id":"contributions","dir":"","previous_headings":"","what":"Contributions","title":"Core Utils for Metabolomics Data","text":"Contributions highly welcome follow contribution guidelines. Also, please check coding style guidelines RforMassSpectrometry vignette.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/addElements.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine chemical formulae — addElements","title":"Combine chemical formulae — addElements","text":"addElements Add one chemical formula another.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/addElements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine chemical formulae — addElements","text":"","code":"addElements(x, y)"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/addElements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine chemical formulae — addElements","text":"x character strings chemical formula y character strings chemical formula added x","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/addElements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine chemical formulae — addElements","text":"character Resulting formula","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/addElements.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combine chemical formulae — addElements","text":"Michael Witting Sebastian Gibb","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/addElements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine chemical formulae — addElements","text":"","code":"addElements(\"C6H12O6\", \"Na\") #> [1] \"C6H12O6Na\"  addElements(\"C6H12O6\", c(\"Na\", \"H2O\")) #> [1] \"C6H12O6Na\" \"C6H14O7\""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/adductFormula.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a table of adduct (ionic) formulas — adductFormula","title":"Calculate a table of adduct (ionic) formulas — adductFormula","text":"adductFormula calculates chemical formulas specified adducts provided chemical formulas.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/adductFormula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a table of adduct (ionic) formulas — adductFormula","text":"","code":"adductFormula(formulas, adduct = \"[M+H]+\", standardize = TRUE)"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/adductFormula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a table of adduct (ionic) formulas — adductFormula","text":"formulas character molecular formulas adduct formulas calculated. adduct character data.frame valid adduct. used. Custom adduct definitions can provided via data.frame format must follow adducts() standardize logical(1) whether standardize molecular formulas Hill notation system calculating mass.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/adductFormula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a table of adduct (ionic) formulas — adductFormula","text":"character matrix formula rows adducts columns containing ion formulas. case ion generated (eg. [M-NH3+H]+ molecule nitrogen), NA returned instead.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/adductFormula.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate a table of adduct (ionic) formulas — adductFormula","text":"Roger Gine","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/adductFormula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a table of adduct (ionic) formulas — adductFormula","text":"","code":"# Calculate the ion formulas of glucose with adducts [M+H]+, [M+Na]+ and [M+K]+ adductFormula(\"C6H12O6\", c(\"[M+H]+\", \"[M+Na]+\", \"[M+K]+\")) #>         [M+H]+       [M+Na]+        [M+K]+        #> C6H12O6 \"[C6H13O6]+\" \"[C6H12O6Na]+\" \"[C6H12O6K]+\"  # > \"[C6H13O6]+\" \"[C6H12O6Na]+\" \"[C6H12O6K]+\"  # Use a custom set of adduct definitions (For instance, a iron (Fe2+) adduct) custom_ads <- data.frame(name = \"[M+Fe]2+\", mass_multi = 0.5, charge = 2,                          formula_add = \"Fe\", formula_sub = \"C0\",                          positive = \"TRUE\") adductFormula(\"C6H12O6\", custom_ads) #>         1               #> C6H12O6 \"[C6H12O6Fe]2+\""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/adductNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve names of supported adducts — adductNames","title":"Retrieve names of supported adducts — adductNames","text":"adductNames returns supported adduct definitions can used mass2mz() mz2mass(). adducts returns data.frame adduct definitions.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/adductNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve names of supported adducts — adductNames","text":"","code":"adductNames(polarity = c(\"positive\", \"negative\"))  adducts(polarity = c(\"positive\", \"negative\"))"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/adductNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve names of supported adducts — adductNames","text":"polarity character(1) defining ion mode, either \"positive\" \"negative\".","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/adductNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve names of supported adducts — adductNames","text":"adductNames: character vector valid adduct names selected ion mode. adducts: data.frame adduct definitions.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/adductNames.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve names of supported adducts — adductNames","text":"Michael Witting, Johannes Rainer","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/adductNames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve names of supported adducts — adductNames","text":"","code":"## retrieve names of adduct names in positive ion mode adductNames(polarity = \"positive\") #>  [1] \"[M+3H]3+\"          \"[M+2H+Na]3+\"       \"[M+H+Na2]3+\"       #>  [4] \"[M+Na3]3+\"         \"[M+2H]2+\"          \"[M+H+NH4]2+\"       #>  [7] \"[M+H+K]2+\"         \"[M+H+Na]2+\"        \"[M+C2H3N+2H]2+\"    #> [10] \"[M+2Na]2+\"         \"[M+C4H6N2+2H]2+\"   \"[M+C6H9N3+2H]2+\"   #> [13] \"[M+H]+\"            \"[M+Li]+\"           \"[M+2Li-H]+\"        #> [16] \"[M+NH4]+\"          \"[M+H2O+H]+\"        \"[M+Na]+\"           #> [19] \"[M+CH4O+H]+\"       \"[M+K]+\"            \"[M+C2H3N+H]+\"      #> [22] \"[M+2Na-H]+\"        \"[M+C3H8O+H]+\"      \"[M+C2H3N+Na]+\"     #> [25] \"[M+2K-H]+\"         \"[M+C2H6OS+H]+\"     \"[M+C4H6N2+H]+\"     #> [28] \"[2M+H]+\"           \"[2M+NH4]+\"         \"[2M+Na]+\"          #> [31] \"[2M+K]+\"           \"[2M+C2H3N+H]+\"     \"[2M+C2H3N+Na]+\"    #> [34] \"[3M+H]+\"           \"[M+H-NH3]+\"        \"[M+H-H2O]+\"        #> [37] \"[M+H-Hexose-H2O]+\" \"[M+H-H4O2]+\"       \"[M+H-CH2O2]+\"      #> [40] \"[M]+\"               ## retrieve names of adduct names in negative ion mode adductNames(polarity = \"negative\") #>  [1] \"[M-3H]3-\"      \"[M-2H]2-\"      \"[M-H]-\"        \"[M+Na-2H]-\"    #>  [5] \"[M+Cl]-\"       \"[M+K-2H]-\"     \"[M+C2H3N-H]-\"  \"[M+CHO2]-\"     #>  [9] \"[M+C2H3O2]-\"   \"[M+Br]-\"       \"[M+C2F3O2]-\"   \"[2M-H]-\"       #> [13] \"[2M+CHO2]-\"    \"[2M+C2H3O2]-\"  \"[3M-H]-\"       \"[M-H+HCOONa]-\" #> [17] \"[M]-\""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/calculateKendrickMass.html","id":null,"dir":"Reference","previous_headings":"","what":"Kendrick mass defects — calculateKendrickMass","title":"Kendrick mass defects — calculateKendrickMass","text":"Kendrick mass defect analysis way analyze high-resolution MS data order identify homologous series. Kendrick mass (KM) calculated choosing specific molecular fragment (e.g. CH2) settings mass integer mass. case CH2 mass 14.01565 set 14.Kendrick mass defect (KMD) defined difference KM nominial (integer) KM. molecules homologoues series, e.g. differing number CH2, identical KMD. additional step KMD can referenced mass defect specific lipid backbone normalize values referenced KMD (RKMD). leads values 0 saturated species -1, -2, -3, etc unsaturated species. Available functoins : calculateKm: calculates Kendrick mass exact mass specific molecular fragment, e.g. \"CH2\". calculateKmd: calculates Kendrick mass defect exact mass specific molecular fragment, e.g. \"CH2\". calculateRkmd: calculates referenced Kendrick mass defect exact mass specific molecular fragment, e.g. \"CH2\", reference KMD. isRkmd: Checks calculated RKMD falls within specific error range around negative integer corresponding number double bonds, case CH2 fragment.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/calculateKendrickMass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kendrick mass defects — calculateKendrickMass","text":"","code":"calculateKm(x, fragment = 14/14.01565)  calculateKmd(x, fragment = 14/14.01565)  calculateRkmd(x, fragment = 14/14.01565, rkmd = 0.749206)  isRkmd(x, rkmdTolerance = 0.1)"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/calculateKendrickMass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kendrick mass defects — calculateKendrickMass","text":"x numeric exact masses calculated RKMDs case isRkmd. fragment numeric(1) character(1) corresponding factor molecular formula molecular fragment, e.g. 14 / 14.01565 \"CH2\" CH2. rkmd numeric(1) KMD used referencing KMDs. rkmdTolerance numeric(1) Tolerance check RKMD fall around negative integer corresponding number double bonds","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/calculateKendrickMass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kendrick mass defects — calculateKendrickMass","text":"numeric boolean. functions, except isRkmd return numeric length input corresponding KM, KMD RMKD. isRkmd returns logical TRUE FALSE indicating RKMD falls within specific range around negative integer corresponding number double bonds.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/calculateKendrickMass.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Kendrick mass defects — calculateKendrickMass","text":"Michael Witting","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/calculateKendrickMass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kendrick mass defects — calculateKendrickMass","text":"","code":"calculateKm(760.5851) #> [1] 759.7358  calculateKmd(760.5851) #> [1] 0.7358239  calculateRkmd(760.5851, rkmd = 0.749206) #> [1] -0.99874  isRkmd(calculateRkmd(760.5851, rkmd = 0.749206)) #> [1] TRUE"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/calculateMass.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate exact mass — calculateMass","title":"Calculate exact mass — calculateMass","text":"calculateMass calculates exact mass formula.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/calculateMass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate exact mass — calculateMass","text":"","code":"calculateMass(x)"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/calculateMass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate exact mass — calculateMass","text":"x character representing chemical formula(s) list  numeric element counts returned countElements().","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/calculateMass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate exact mass — calculateMass","text":"numeric Resulting exact mass.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/calculateMass.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate exact mass — calculateMass","text":"Michael Witting","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/calculateMass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate exact mass — calculateMass","text":"","code":"calculateMass(\"C6H12O6\") #>  C6H12O6  #> 180.0634  calculateMass(\"NH3\") #>      NH3  #> 17.02655  calculateMass(c(\"C6H12O6\", \"NH3\")) #>   C6H12O6       NH3  #> 180.06339  17.02655  calculateMass(c(\"C6H12O6\", \"[13C3]C3H12O6\")) #>       C6H12O6 [13C3]C3H12O6  #>      180.0634      183.0735"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/containsElements.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if one formula is contained in another — containsElements","title":"Check if one formula is contained in another — containsElements","text":"containsElements checks one sum formula contained another.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/containsElements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if one formula is contained in another — containsElements","text":"","code":"containsElements(x, y)"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/containsElements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if one formula is contained in another — containsElements","text":"x character strings chemical formula y character strings chemical formula shall contained x","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/containsElements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if one formula is contained in another — containsElements","text":"logical TRUE y contained x","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/containsElements.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if one formula is contained in another — containsElements","text":"Michael Witting Sebastian Gibb","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/containsElements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if one formula is contained in another — containsElements","text":"","code":"containsElements(\"C6H12O6\", \"H2O\") #> [1] TRUE containsElements(\"C6H12O6\", \"NH3\") #> [1] FALSE"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/convertMtime.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert migration times to effective mobility — convertMtime","title":"Convert migration times to effective mobility — convertMtime","text":"convertMtime performs effective mobility scale transformation CE(-MS) data, used overcome variations migration times, caused differences Electroosmotic Flow (EOF) different runs. order monitor EOF perform transformation, neutral charged EOF markers spiked sample analysis. information EOF markers (migration time effective mobility) used perform  effective mobility transformation migration time scale.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/convertMtime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert migration times to effective mobility — convertMtime","text":"","code":"convertMtime(   x = numeric(),   rtime = numeric(),   mobility = numeric(),   tR = 0,   U = numeric(),   L = numeric() )"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/convertMtime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert migration times to effective mobility — convertMtime","text":"x numeric vector migration times minutes. rtime numeric vector holds migration times (minutes) either one two EOF markers run migration time going transformed. mobility numeric vector containing respective effective mobility (mm^2 / (kV * min)) EOF markers. two markers used, one expected neutral marker, .e. mobility 0. tR numeric single value defines time (minutes) electrical field ramp. default 0. U numeric single value defines voltage (kV) applied. Note reversed polarity CE mode negative value needed. used transformation performed based single marker. L numeric single value defines total length (mm) capillary used CE(-MS) analysis. used transformation performed based single marker.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/convertMtime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert migration times to effective mobility — convertMtime","text":"numeric vector length x effective mobility values.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/convertMtime.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert migration times to effective mobility — convertMtime","text":"Liesa Salzer","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/convertMtime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert migration times to effective mobility — convertMtime","text":"","code":"rtime <- c(10,20,30,40,50,60,70,80,90,100)  marker_rt <-  c(20,80)  mobility <- c(0, 2000)  convertMtime(rtime, marker_rt, mobility) #>  [1] -2666.6667     0.0000   888.8889  1333.3333  1600.0000  1777.7778 #>  [7]  1904.7619  2000.0000  2074.0741  2133.3333"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/correctRindex.html","id":null,"dir":"Reference","previous_headings":"","what":"2-point correction of RIs — correctRindex","title":"2-point correction of RIs — correctRindex","text":"correctRindex performs correction retention indices (RIs) based reference substances. Even conversion RTs RIs slight deviations might exist. deviations can normalized, linear, using two metabolites RIs known (e.g. internal standards).","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/correctRindex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2-point correction of RIs — correctRindex","text":"","code":"correctRindex(x, y)"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/correctRindex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"2-point correction of RIs — correctRindex","text":"x numeric vector retention indices, calculated indexRtime y data.frame containing two columns. first expected contain measured RIs reference substances second reference RIs.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/correctRindex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"2-point correction of RIs — correctRindex","text":"numeric vector length x corrected retention indices. Values floating point decimals. integer values shall used conversion performed manually.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/correctRindex.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"2-point correction of RIs — correctRindex","text":"Michael Witting","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/correctRindex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"2-point correction of RIs — correctRindex","text":"","code":"ref <- data.frame(rindex = c(110, 210), refindex = c(100, 200)) rindex <- c(110, 210) correctRindex(rindex, ref) #> [1] 100 200"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/countElements.html","id":null,"dir":"Reference","previous_headings":"","what":"Count elements in a chemical formula — countElements","title":"Count elements in a chemical formula — countElements","text":"countElements parses strings representing chemical formula named vector element counts.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/countElements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count elements in a chemical formula — countElements","text":"","code":"countElements(x)"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/countElements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count elements in a chemical formula — countElements","text":"x character() representing chemical formula.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/countElements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count elements in a chemical formula — countElements","text":"list integer element counts (names elements).","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/countElements.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Count elements in a chemical formula — countElements","text":"Michael Witting Sebastian Gibb","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/countElements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count elements in a chemical formula — countElements","text":"","code":"countElements(c(\"C6H12O6\", \"C11H12N2O2\")) #> $C6H12O6 #>  C  H  O  #>  6 12  6  #>  #> $C11H12N2O2 #>  C  H  N  O  #> 11 12  2  2  #>"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/formula2mz.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate mass-to-charge ratio from a formula — formula2mz","title":"Calculate mass-to-charge ratio from a formula — formula2mz","text":"formula2mz calculates m/z values list molecular formulas adduct definitions. Custom adduct definitions can passed adduct parameter form data.frame. data.frame expected columns \"mass_add\" \"mass_multi\" defining additive multiplicative part calculation. See adducts() examples.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/formula2mz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate mass-to-charge ratio from a formula — formula2mz","text":"","code":"formula2mz(formula, adduct = \"[M+H]+\", standardize = TRUE)"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/formula2mz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate mass-to-charge ratio from a formula — formula2mz","text":"formula character one valid molecular formulas adduct m/z shall calculated. adduct either character specifying name(s) adduct(s) m/z calculated data.frame adduct definition. See adductNames() supported adduct names description information expected format data.frame provided. standardize logical whether standardize molecular formulas Hill notation system calculating mass.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/formula2mz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate mass-to-charge ratio from a formula — formula2mz","text":"Numeric matrix number rows elements formula number columns equal length adduct (adduct names used column names). column thus represents m/z formula defined adduct.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/formula2mz.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate mass-to-charge ratio from a formula — formula2mz","text":"Roger Gine","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/formula2mz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate mass-to-charge ratio from a formula — formula2mz","text":"","code":"## Calculate m/z values of adducts of a list of formulas formulas <- c(\"C6H12O6\", \"C9H11NO3\", \"C16H13ClN2O\") ads <- c(\"[M+H]+\", \"[M+Na]+\", \"[2M+H]+\", \"[M]+\") formula2mz(formulas, ads) #>               [M+H]+  [M+Na]+  [2M+H]+     [M]+ #> C6H12O6     181.0707 203.0526 361.1341 180.0634 #> C9H11NO3    182.0812 204.0631 363.1551 181.0739 #> C16H13N2OCl 285.0789 307.0609 569.1506 284.0716 formula2mz(formulas, adductNames()) #All available adducts #>             [M+3H]3+ [M+2H+Na]3+ [M+H+Na2]3+ [M+Na3]3+  [M+2H]2+ [M+H+NH4]2+ #> C6H12O6     61.02841    68.35572    75.68303  83.01035  91.03897    99.55225 #> C9H11NO3    61.36524    68.69256    76.01987  83.34718  91.54422   100.05750 #> C16H13N2OCl 95.69782   103.02514   110.35245 117.67977 143.04310   151.55637 #>             [M+H+K]2+ [M+H+Na]2+ [M+C2H3N+2H]2+ [M+2Na]2+ [M+C4H6N2+2H]2+ #> C6H12O6      110.0169   102.0299       111.5522  113.0209        132.0655 #> C9H11NO3     110.5222   102.5352       112.0575  113.5262        132.5708 #> C16H13N2OCl  162.0210   154.0341       163.5564  165.0250        184.0696 #>             [M+C6H9N3+2H]2+   [M+H]+  [M+Li]+ [M+2Li-H]+ [M+NH4]+ [M+H2O+H]+ #> C6H12O6            152.5788 181.0707 187.0788   193.0870 198.0972   199.0812 #> C9H11NO3           153.0840 182.0812 188.0893   194.0975 199.1077   200.0917 #> C16H13N2OCl        204.5829 285.0789 291.0871   297.0953 302.1055   303.0895 #>              [M+Na]+ [M+CH4O+H]+   [M+K]+ [M+C2H3N+H]+ [M+2Na-H]+ [M+C3H8O+H]+ #> C6H12O6     203.0526    213.0969 219.0265     222.0972   225.0346     241.1282 #> C9H11NO3    204.0631    214.1074 220.0371     223.1077   226.0451     242.1387 #> C16H13N2OCl 307.0609    317.1051 323.0348     326.1055   329.0428     345.1364 #>             [M+C2H3N+Na]+ [M+2K-H]+ [M+C2H6OS+H]+ [M+C4H6N2+H]+  [2M+H]+ #> C6H12O6          244.0792  256.9824      259.0846      263.1238 361.1341 #> C9H11NO3         245.0897  257.9929      260.0951      264.1343 363.1551 #> C16H13N2OCl      348.0874  360.9907      363.0929      367.1320 569.1506 #>             [2M+NH4]+ [2M+Na]+  [2M+K]+ [2M+C2H3N+H]+ [2M+C2H3N+Na]+  [3M+H]+ #> C6H12O6      378.1606 383.1160 399.0899      402.1606       424.1425 541.1974 #> C9H11NO3     380.1816 385.1370 401.1109      404.1816       426.1636 544.2290 #> C16H13N2OCl  586.1771 591.1325 607.1064      610.1771       632.1591 853.2222 #>             [M+H-NH3]+ [M+H-H2O]+ [M+H-Hexose-H2O]+ [M+H-H4O2]+ [M+H-CH2O2]+ #> C6H12O6       164.0441   163.0601          19.01783    145.0495     135.0652 #> C9H11NO3      165.0546   164.0706          20.02834    146.0600     136.0757 #> C16H13N2OCl   268.0524   267.0684         123.02609    249.0578     239.0734 #>                 [M]+ #> C6H12O6     180.0634 #> C9H11NO3    181.0739 #> C16H13N2OCl 284.0716  ## Use custom-defined adducts as input custom_ads <- data.frame(mass_add = c(1, 2, 3), mass_multi = c(1, 2, 0.5)) formula2mz(formulas, custom_ads) #>                    1        2         3 #> C6H12O6     181.0634 362.1268  93.03169 #> C9H11NO3    182.0739 364.1478  93.53695 #> C16H13N2OCl 285.0716 570.1433 145.03582  ## Use standardize = FALSE to keep formula unaltered formula2mz(\"H12C6O6\") #>           [M+H]+ #> C6H12O6 181.0707 formula2mz(\"H12C6O6\", standardize = FALSE) #>           [M+H]+ #> H12C6O6 181.0707"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/indexRtime.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert retention times to retention indices — indexRtime","title":"Convert retention times to retention indices — indexRtime","text":"indexRtime uses list known substances convert retention times (RTs) retention indices (RIs). retention information normalized differences experimental settings, gradient delay volume, dead volume flow rate. default linear interpolation performed, ways calculation can supplied function.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/indexRtime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert retention times to retention indices — indexRtime","text":"","code":"indexRtime(x, y, FUN = rtiLinear, ...)"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/indexRtime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert retention times to retention indices — indexRtime","text":"x numeric vector retention times y data.framedata.frame containing two columns, first holds retention times indexing substances second actual index value FUN function function defining conversion performed, default linear interpolation ... additional parameter used FUN","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/indexRtime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert retention times to retention indices — indexRtime","text":"numeric vector length x retention indices. Values floating point decimals. integer values shall used conversion performed manually","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/indexRtime.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert retention times to retention indices — indexRtime","text":"Michael Witting","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/indexRtime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert retention times to retention indices — indexRtime","text":"","code":"rti <- data.frame(rtime = c(1,2,3), rindex = c(100,200,300)) rtime <- c(1.5, 2.5) indexRtime(rtime, rti) #> [1] 150 250"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/internalStandardMixNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Get names of internal standard mixes provided by the package — internalStandardMixNames","title":"Get names of internal standard mixes provided by the package — internalStandardMixNames","text":"internalStandardMixNames returns available names internal standard mixes provided MetaboCoreUtils package.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/internalStandardMixNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get names of internal standard mixes provided by the package — internalStandardMixNames","text":"","code":"internalStandardMixNames()"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/internalStandardMixNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get names of internal standard mixes provided by the package — internalStandardMixNames","text":"character names available mixes","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/internalStandardMixNames.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get names of internal standard mixes provided by the package — internalStandardMixNames","text":"Michael Witting","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/internalStandardMixNames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get names of internal standard mixes provided by the package — internalStandardMixNames","text":"","code":"internalStandardMixNames() #> [1] \"QReSS\"             \"UltimateSplashOne\""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/internalStandards.html","id":null,"dir":"Reference","previous_headings":"","what":"Get definitions for internal standards — internalStandards","title":"Get definitions for internal standards — internalStandards","text":"internalStandards returns table metabolite standards available commercial internal standard mixes. returned data frame contains following columns: \"name\": name standard \"formula_salt\": chemical formula salt used produce standard mix \"formula_metabolite\": chemical formula metabolite free form \"smiles_salt\": SMILES salt used produced standard mix \"smiles_metabolite\": SMILES metabolite free form \"mol_weight_salt\": molecular (average) weight salt (can used calculation molar concentration, etc.) \"exact_mass_metabolite\": exact mass free metabolites \"conc\": concentration metabolite ug/mL (salt form) \"mix\": name internal standard mix","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/internalStandards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get definitions for internal standards — internalStandards","text":"","code":"internalStandards(mix = \"QReSS\")"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/internalStandards.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get definitions for internal standards — internalStandards","text":"mix character(1) Name internal standard mix shall returned. One internalStandardMixNames().","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/internalStandards.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get definitions for internal standards — internalStandards","text":"data.frame data internal standards","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/internalStandards.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get definitions for internal standards — internalStandards","text":"Michael Witting","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/internalStandards.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get definitions for internal standards — internalStandards","text":"","code":"internalStandards(mix = \"QReSS\") #>                                                              name #> 1                                 L-Alanine (13C3, 99%; 15N, 99%) #> 2                1,4-Butanediamine (putrescine)Â·2HCl (13C4, 99%) #> 3                                   Creatinine (N-methyl-D3, 98%) #> 4                             EthanolamineÂ·HCl (1,1,2,2-D4, 98%) #> 5                                  GuanosineÂ·2H2O (15N5, 96-98%) #> 6                                        Hypoxanthine (13C5, 99%) #> 7                                           L-Leucine (13C6, 99%) #> 8                                L-Phenylalanine (ring-13C6, 99%) #> 9                                         Thymine (1,3-15N2, 98%) #> 10                                      L-Tryptophan (13C11, 99%) #> 11                                    L-Tyrosine (ring-13C6, 99%) #> 12                          Vitamin B3 (nicotinamide) (13C6, 99%) #> 13                         Citric acid (1,5,6-carboxyl-13C3, 99%) #> 14                                       Fumaric acid (13C4, 99%) #> 15                        Indole-3-acetic acid (phenyl-13C6, 99%) #> 16 Î±-Ketoglutaric acid, disodium salt (1,2,3,4-13C4, 99%) CP 97% #> 17                                Sodium palmitate (U-13C16, 98%) #> 18                                    Sodium pyruvate (13C3, 99%) #>      formula_salt formula_metabolite #> 1     [13C]3H7NO2        [13C]3H7NO2 #> 2  [13C]4H14Cl2N2        [13C]4H12N2 #> 3       C4H4D3N3O          C4H4D3N3O #> 4        C2H8ClNO             C2H7NO #> 5  C10H17[15N]5O7     C10H13[15N]5O5 #> 6     [13C]5H4N4O        [13C]5H4N4O #> 7    [13C]6H13NO2       [13C]6H13NO2 #> 8  C3[13C]6H11NO2     C3[13C]6H11NO2 #> 9    C5H6[15N]2O2       C5H6[15N]2O2 #> 10 [13C]11H12N2O2     [13C]11H12N2O2 #> 11 C3[13C]6H11NO3     C3[13C]6H11NO3 #> 12    [13C]6H5NO2        [13C]6H5NO2 #> 13   C3[13C]3H8O7       C3[13C]3H8O7 #> 14     [13C]4H4O4         [13C]4H4O4 #> 15  C4[13C]6H9NO2      C4[13C]6H9NO2 #> 16 C[13C]4H4Na2O5        C[13C]4H6O5 #> 17 [13C]16H31NaO2       [13C]16H32O2 #> 18   [13C]3H3NaO3         [13C]3H4O3 #>                                                                                                                     smiles_salt #> 1                                                                                                   [13CH3][13C@H](N)[13C](O)=O #> 2                                                                          [Cl-].[Cl-].[NH3+][13CH2][13CH2][13CH2][13CH2][NH3+] #> 3                                                                                                [2H]C([2H])([2H])N1CC(=O)N=C1N #> 4                                                                                           [Cl-].[H]C([H])([NH3+])C([H])([H])O #> 5                                           O.O.[15NH2]C1=[15N]C2=C([15N]=C[15N]2[C@@H]2O[C@H](CO)[C@@H](O)[C@H]2O)C(=O)[15NH]1 #> 6                                                                                      O=[13C]1N=[13CH]N[13C]2=[13C]1N[13CH]=N2 #> 7                                                                             [13CH3][13CH]([13CH3])[13CH2][13C@H](N)[13C](O)=O #> 8                                                                      N[C@@H](C[13C]1=[13CH][13CH]=[13CH][13CH]=[13CH]1)C(O)=O #> 9                                                                                                    CC1=C[15NH]C(=O)[15NH]C1=O #> 10                                           N[13C@@H]([13CH2][13C]1=[13CH]N[13C]2=[13C]1[13CH]=[13CH][13CH]=[13CH]2)[13C](O)=O #> 11                                                                   N[C@@H](C[13C]1=[13CH][13CH]=[13C](O)[13CH]=[13CH]1)C(O)=O #> 12                                                                                O[13C](=O)[13C]1=[13CH][13CH]=[13CH]N=[13CH]1 #> 13                                                                                       O[13C](=O)CC(O)(C[13C](O)=O)[13C](O)=O #> 14                                                                                        O[13C](=O)\\\\[13CH]=[13CH]\\\\[13C](O)=O #> 15                                                                         OC(=O)CC1=CN[13C]2=[13CH][13CH]=[13CH][13CH]=[13C]12 #> 16                                                                    [Na+].[Na+].[O-]C(=O)[13CH2][13CH2][13C](=O)[13C]([O-])=O #> 17 [Na+].[13CH3][13CH2][13CH2][13CH2][13CH2][13CH2][13CH2][13CH2][13CH2][13CH2][13CH2][13CH2][13CH2][13CH2][13CH2][13C]([O-])=O #> 18                                                                                          [Na+].[13CH3][13C](=O)[13C]([O-])=O #>                                                                                                      smiles_metabolite #> 1                                                                                          [13CH3][13C@H](N)[13C](O)=O #> 2                                                                                       N[13CH2][13CH2][13CH2][13CH2]N #> 3                                                                                       [2H]C([2H])([2H])N1CC(=O)N=C1N #> 4                                                                                             [H]C([H])(N)C([H])([H])O #> 5                                      [15NH2]C1=[15N]C2=C([15N]=C[15N]2[C@@H]2O[C@H](CO)[C@@H](O)[C@H]2O)C(=O)[15NH]1 #> 6                                                                             O=[13C]1N=[13CH]N[13C]2=[13C]1N[13CH]=N2 #> 7                                                                    [13CH3][13CH]([13CH3])[13CH2][13C@H](N)[13C](O)=O #> 8                                                             N[C@@H](C[13C]1=[13CH][13CH]=[13CH][13CH]=[13CH]1)C(O)=O #> 9                                                                                           CC1=C[15NH]C(=O)[15NH]C1=O #> 10                                  N[13C@@H]([13CH2][13C]1=[13CH]N[13C]2=[13C]1[13CH]=[13CH][13CH]=[13CH]2)[13C](O)=O #> 11                                                          N[C@@H](C[13C]1=[13CH][13CH]=[13C](O)[13CH]=[13CH]1)C(O)=O #> 12                                                                       O[13C](=O)[13C]1=[13CH][13CH]=[13CH]N=[13CH]1 #> 13                                                                              O[13C](=O)CC(O)(C[13C](O)=O)[13C](O)=O #> 14                                                                               O[13C](=O)\\\\[13CH]=[13CH]\\\\[13C](O)=O #> 15                                                                OC(=O)CC1=CN[13C]2=[13CH][13CH]=[13CH][13CH]=[13C]12 #> 16                                                                             OC(=O)[13CH2][13CH2][13C](=O)[13C](O)=O #> 17 [13CH3][13CH2][13CH2][13CH2][13CH2][13CH2][13CH2][13CH2][13CH2][13CH2][13CH2][13CH2][13CH2][13CH2][13CH2][13C](O)=O #> 18                                                                                          [13CH3][13C](=O)[13C](O)=O #>    mol_weight_salt exact_mass_metabolite conc   mix #> 1           92.071              92.05774  100 QReSS #> 2          165.040              92.11347   10 QReSS #> 3          116.138             116.07774  100 QReSS #> 4           97.540              61.05276   10 QReSS #> 5          324.240             288.07684    2 QReSS #> 6          141.076             141.05528   10 QReSS #> 7          137.129             137.11476    5 QReSS #> 8          171.146             171.09911  100 QReSS #> 9          128.101             128.03700   20 QReSS #> 10         215.145             215.12678  100 QReSS #> 11         187.145             187.09402  100 QReSS #> 12         129.065             129.05216    5 QReSS #> 13         195.100             195.03707   10 QReSS #> 14         120.041             120.02438  100 QReSS #> 15         181.141             181.08346    5 QReSS #> 16         194.031             150.03494  100 QReSS #> 17         294.289             272.29391   10 QReSS #> 18         113.021              91.02611  100 QReSS internalStandards(mix = \"UltimateSplashOne\") #>                                 name    formula_salt formula_metabolite #> 1               14:0-13:0-14:0 TG-d5      C44H79D5O6         C44H79D5O6 #> 2               14:0-15:1-14:0 TG-d5      C46H81D5O6         C46H81D5O6 #> 3               14:0-17:1-14:0 TG-d5      C48H85D5O6         C48H85D5O6 #> 4               16:0-15:1-16:0 TG-d5      C50H89D5O6         C50H89D5O6 #> 5               16:0-17:1-16:0 TG-d5      C52H93D5O6         C52H93D5O6 #> 6               16:0-19:2-16:0 TG-d5      C54H95D5O6         C54H95D5O6 #> 7               18:1-17:1-18:1 TG-d5      C56H97D5O6         C56H97D5O6 #> 8               18:1-19:2-18:1 TG-d5      C58H99D5O6         C58H99D5O6 #> 9               18:1-21:2-18:1 TG-d5     C60H103D5O6        C60H103D5O6 #> 10         14:1 cholesteryl-d7 ester      C41H63D7O2         C41H63D7O2 #> 11         16:1 cholesteryl-d7 ester      C43H67D7O2         C43H67D7O2 #> 12         18:1 cholesteryl-d7 ester      C45H71D7O2         C45H71D7O2 #> 13         20:3 cholesteryl-d7 ester      C47H71D7O2         C47H71D7O2 #> 14         22:4 cholesteryl-d7 ester      C49H73D7O2         C49H73D7O2 #> 15 C16:1 Ceramide-d7 (d18:1-d7/16:1)     C34H58D7NO3        C34H58D7NO3 #> 16 C18:1 Ceramide-d7 (d18:1-d7/18:1)     C36H62D7NO3        C36H62D7NO3 #> 17 C20:1 Ceramide-d7 (d18:1-d7/20:1)     C38H66D7NO3        C38H66D7NO3 #> 18 C22:1 Ceramide-d7 (d18:1-d7/22:1)     C40H70D7NO3        C40H70D7NO3 #> 19 C24:1 Ceramide-d7 (d18:1-d7/24:1)     C42H74D7NO3        C42H74D7NO3 #> 20           16:1 SM (d18:1/16:1)-d9   C39H68D9N2O6P      C39H68D9N2O6P #> 21           18:1 SM (d18:1/18:1)-d9   C41H72D9N2O6P      C41H72D9N2O6P #> 22           20:1 SM (d18:1/20:1)-d9   C43H76D9N2O6P      C43H76D9N2O6P #> 23           22:1 SM (d18:1/22:1)-d9   C45H80D9N2O6P      C45H80D9N2O6P #> 24           24:1 SM (d18:1/24:1)-d9   C47H84D9N2O6P      C47H84D9N2O6P #> 25                   17:0-14:1 PC-d5    C39H71D5NO8P       C39H71D5NO8P #> 26                   17:0-16:1 PC-d5    C41H75D5NO8P       C41H75D5NO8P #> 27                   17:0-18:1 PC-d5    C43H79D5NO8P       C43H79D5NO8P #> 28                   17:0-20:3 PC-d5    C45H79D5NO8P       C45H79D5NO8P #> 29                   17:0-22:4 PC-d5    C47H81D5NO8P       C47H81D5NO8P #> 30                   17:0-14:1 PE-d5    C36H65D5NO8P       C36H65D5NO8P #> 31                   17:0-16:1 PE-d5    C38H69D5NO8P       C38H69D5NO8P #> 32                   17:0-18:1 PE-d5    C40H73D5NO8P       C40H73D5NO8P #> 33                   17:0-20:3 PE-d5    C42H73D5NO8P       C42H73D5NO8P #> 34                   17:0-22:4 PE-d5    C44H75D5NO8P       C44H75D5NO8P #> 35                   17:0-14:1 PG-d5  C37H65D5NaO10P       C37H66D5O10P #> 36                   17:0-16:1 PG-d5  C39H69D5NaO10P       C39H70D5O10P #> 37                   17:0-18:1 PG-d5  C41H73D5NaO10P       C41H74D5O10P #> 38                   17:0-20:3 PG-d5  C43H73D5NaO10P       C43H74D5O10P #> 39                   17:0-22:4 PG-d5  C45H75D5NaO10P       C45H76D5O10P #> 40                   17:0-14:1 PS-d5 C37H64D5NNaO10P      C37H65D5NO10P #> 41                   17:0-16:1 PS-d5 C39H68D5NNaO10P      C39H69D5NO10P #> 42                   17:0-18:1 PS-d5 C41H72D5NNaO10P      C41H73D5NO10P #> 43                   17:0-20:3 PS-d5 C43H72D5NNaO10P      C43H73D5NO10P #> 44                   17:0-22:4 PS-d5 C45H74D5NNaO10P      C45H75D5NO10P #> 45                   17:0-14:1 DG-d5      C34H59D5O5         C34H59D5O5 #> 46                   17:0-16:1 DG-d5      C36H63D5O5         C36H63D5O5 #> 47                   17:0-18:1 DG-d5      C38H67D5O5         C38H67D5O5 #> 48                   17:0-20:3 DG-d5      C40H67D5O5         C40H67D5O5 #> 49                   17:0-22:4 DG-d5      C42H69D5O5         C42H69D5O5 #> 50                   17:0-14:1 PI-d5   C40H73D5NO13P      C40H73D5NO13P #> 51                   17:0-16:1 PI-d5   C42H77D5NO13P      C42H77D5NO13P #> 52                   17:0-18:1 PI-d5   C44H81D5NO13P      C44H81D5NO13P #> 53                   17:0-20:3 PI-d5   C46H81D5NO13P      C46H81D5NO13P #> 54                   17:0-22:4 PI-d5   C48H83D5NO13P      C48H83D5NO13P #> 55                   15:0 Lyso PI-d5   C24H45D5NO12P      C24H45D5NO12P #> 56                   17:0 Lyso PI-d5   C26H49D5NO12P      C26H49D5NO12P #> 57                   19:0 Lyso PI-d5   C28H53D5NO12P      C28H53D5NO12P #> 58                   15:0 Lyso PS-d5  C21H36D5NNaO9P       C21H37D5NO9P #> 59                   17:0 Lyso PS-d5  C23H40D5NNaO9P       C23H41D5NO9P #> 60                   19:0 Lyso PS-d5  C25H44D5NNaO9P       C25H45D5NO9P #> 61                   15:0 Lyso PG-d5   C21H37D5NaO9P        C21H38D5O9P #> 62                   17:0 Lyso PG-d5   C23H41D5NaO9P        C23H42D5O9P #> 63                   19:0 Lyso PG-d5   C25H45D5NaO9P        C25H46D5O9P #> 64                   15:0 Lyso PC-d5    C23H43D5NO7P       C23H43D5NO7P #> 65                   17:0 Lyso PC-d5    C25H47D5NO7P       C25H47D5NO7P #> 66                   19:0 Lyso PC-d5    C27H51D5NO7P       C27H51D5NO7P #> 67                   15:0 Lyso PE-d5    C20H37D5NO7P       C20H37D5NO7P #> 68                   17:0 Lyso PE-d5    C22H41D5NO7P       C22H41D5NO7P #> 69                   19:0 Lyso PE-d5    C24H45D5NO7P       C24H45D5NO7P #>                                                                                                                                                                            smiles_salt #> 1                                                                                          [2H]C([2H])(OC(=O)CCCCCCCCCCCCC)C([2H])(OC(=O)CCCCCCCCCCCC)C([2H])([2H])OC(=O)CCCCCCCCCCCCC #> 2                                                                                    [2H]C([2H])(OC(=O)CCCCCCCCCCCCC)C([2H])(OC(=O)CCCCCCCC\\\\C=C/CCCC)C([2H])([2H])OC(=O)CCCCCCCCCCCCC #> 3                                                                                  [2H]C([2H])(OC(=O)CCCCCCCCCCCCC)C([2H])(OC(=O)CCCCCCCC\\\\C=C/CCCCCC)C([2H])([2H])OC(=O)CCCCCCCCCCCCC #> 4                                                                                [2H]C([2H])(OC(=O)CCCCCCCCCCCCCCC)C([2H])(OC(=O)CCCCCCCC\\\\C=C/CCCC)C([2H])([2H])OC(=O)CCCCCCCCCCCCCCC #> 5                                                                              [2H]C([2H])(OC(=O)CCCCCCCCCCCCCCC)C([2H])(OC(=O)CCCCCCCC\\\\C=C/CCCCCC)C([2H])([2H])OC(=O)CCCCCCCCCCCCCCC #> 6                                                                        [2H]C([2H])(OC(=O)CCCCCCCCCCCCCCC)C([2H])(OC(=O)CCCCCCCC\\\\C=C/C\\\\C=C/CCCCC)C([2H])([2H])OC(=O)CCCCCCCCCCCCCCC #> 7                                                                  [2H]C([2H])(OC(=O)CCCCCCC\\\\C=C/CCCCCCCC)C([2H])(OC(=O)CCCCCCCC\\\\C=C/CCCCCC)C([2H])([2H])OC(=O)CCCCCCC\\\\C=C/CCCCCCCC #> 8                                                            [2H]C([2H])(OC(=O)CCCCCCC\\\\C=C/CCCCCCCC)C([2H])(OC(=O)CCCCCCCC\\\\C=C/C\\\\C=C/CCCCC)C([2H])([2H])OC(=O)CCCCCCC\\\\C=C/CCCCCCCC #> 9                                                          [2H]C([2H])(OC(=O)CCCCCCC\\\\C=C/CCCCCCCC)C([2H])(OC(=O)CCCCCCCCCC\\\\C=C/C\\\\C=C/CCCCC)C([2H])([2H])OC(=O)CCCCCCC\\\\C=C/CCCCCCCC #> 10                     [H][C@@](C)(CCCC([2H])(C([2H])([2H])[2H])C([2H])([2H])[2H])[C@@]1([H])CC[C@@]2([H])[C@]3([H])CC=C4C[C@H](CC[C@]4(C)[C@@]3([H])CC[C@]12C)OC(=O)CCCCCCC\\\\C=C/CCCC #> 11                   [H][C@@](C)(CCCC([2H])(C([2H])([2H])[2H])C([2H])([2H])[2H])[C@@]1([H])CC[C@@]2([H])[C@]3([H])CC=C4C[C@H](CC[C@]4(C)[C@@]3([H])CC[C@]12C)OC(=O)CCCCCCC\\\\C=C/CCCCCC #> 12                 [H][C@@](C)(CCCC([2H])(C([2H])([2H])[2H])C([2H])([2H])[2H])[C@@]1([H])CC[C@@]2([H])[C@]3([H])CC=C4C[C@H](CC[C@]4(C)[C@@]3([H])CC[C@]12C)OC(=O)CCCCCCC\\\\C=C/CCCCCCCC #> 13       [H][C@@](C)(CCCC([2H])(C([2H])([2H])[2H])C([2H])([2H])[2H])[C@@]1([H])CC[C@@]2([H])[C@]3([H])CC=C4C[C@H](CC[C@]4(C)[C@@]3([H])CC[C@]12C)OC(=O)CCCCCCCCC\\\\C=C/C\\\\C=C/C\\\\C=C/CC #> 14 [H][C@@](C)(CCCC([2H])(C([2H])([2H])[2H])C([2H])([2H])[2H])[C@@]1([H])CC[C@@]2([H])[C@]3([H])CC=C4C[C@H](CC[C@]4(C)[C@@]3([H])CC[C@]12C)OC(=O)CCCCC\\\\C=C/C\\\\C=C/C\\\\C=C/C\\\\C=C/CCCCC #> 15                                                                     [H][C@@](O)(\\\\C=C\\\\CCCCCCCCCCC([2H])([2H])C([2H])([2H])C([2H])([2H])[2H])[C@]([H])(CO)NC(=O)CCCCCCC\\\\C=C/CCCCCC #> 16                                                                   [H][C@@](O)(\\\\C=C\\\\CCCCCCCCCCC([2H])([2H])C([2H])([2H])C([2H])([2H])[2H])[C@]([H])(CO)NC(=O)CCCCCCC\\\\C=C/CCCCCCCC #> 17                                                                 [H][C@@](O)(\\\\C=C\\\\CCCCCCCCCCC([2H])([2H])C([2H])([2H])C([2H])([2H])[2H])[C@]([H])(CO)NC(=O)CCCCCCCCC\\\\C=C/CCCCCCCC #> 18                                                               [H][C@@](O)(\\\\C=C\\\\CCCCCCCCCCC([2H])([2H])C([2H])([2H])C([2H])([2H])[2H])[C@]([H])(CO)NC(=O)CCCCCCCCCCC\\\\C=C/CCCCCCCC #> 19                                                             [H][C@@](O)(\\\\C=C\\\\CCCCCCCCCCC([2H])([2H])C([2H])([2H])C([2H])([2H])[2H])[C@]([H])(CO)NC(=O)CCCCCCCCCCCCC\\\\C=C/CCCCCCCC #> 20                                    [H][C@@](O)(\\\\C=C\\\\CCCCCCCCCCCCC)[C@]([H])(COP([O-])(=O)OCC[N+](C([2H])([2H])[2H])(C([2H])([2H])[2H])C([2H])([2H])[2H])NC(=O)CCCCCCC\\\\C=C/CCCCCC #> 21                                  [H][C@@](O)(\\\\C=C\\\\CCCCCCCCCCCCC)[C@]([H])(COP([O-])(=O)OCC[N+](C([2H])([2H])[2H])(C([2H])([2H])[2H])C([2H])([2H])[2H])NC(=O)CCCCCCC\\\\C=C/CCCCCCCC #> 22                                [H][C@@](O)(\\\\C=C\\\\CCCCCCCCCCCCC)[C@]([H])(COP([O-])(=O)OCC[N+](C([2H])([2H])[2H])(C([2H])([2H])[2H])C([2H])([2H])[2H])NC(=O)CCCCCCCCC\\\\C=C/CCCCCCCC #> 23                              [H][C@@](O)(\\\\C=C\\\\CCCCCCCCCCCCC)[C@]([H])(COP([O-])(=O)OCC[N+](C([2H])([2H])[2H])(C([2H])([2H])[2H])C([2H])([2H])[2H])NC(=O)CCCCCCCCCCC\\\\C=C/CCCCCCCC #> 24                            [H][C@@](O)(\\\\C=C\\\\CCCCCCCCCCCCC)[C@]([H])(COP([O-])(=O)OCC[N+](C([2H])([2H])[2H])(C([2H])([2H])[2H])C([2H])([2H])[2H])NC(=O)CCCCCCCCCCCCC\\\\C=C/CCCCCCCC #> 25                                                                      [2H]C([2H])(OC(=O)CCCCCCCCCCCCCCCC)[C@@]([2H])(OC(=O)CCCCCCC\\\\C=C/CCCC)C([2H])([2H])OP([O-])(=O)OCC[N+](C)(C)C #> 26                                                                    [2H]C([2H])(OC(=O)CCCCCCCCCCCCCCCC)[C@@]([2H])(OC(=O)CCCCCCC\\\\C=C/CCCCCC)C([2H])([2H])OP([O-])(=O)OCC[N+](C)(C)C #> 27                                                                  [2H]C([2H])(OC(=O)CCCCCCCCCCCCCCCC)[C@@]([2H])(OC(=O)CCCCCCC\\\\C=C/CCCCCCCC)C([2H])([2H])OP([O-])(=O)OCC[N+](C)(C)C #> 28                                                        [2H]C([2H])(OC(=O)CCCCCCCCCCCCCCCC)[C@@]([2H])(OC(=O)CCCCCCCCC\\\\C=C/C\\\\C=C/C\\\\C=C/CC)C([2H])([2H])OP([O-])(=O)OCC[N+](C)(C)C #> 29                                                  [2H]C([2H])(OC(=O)CCCCCCCCCCCCCCCC)[C@@]([2H])(OC(=O)CCCCC\\\\C=C/C\\\\C=C/C\\\\C=C/C\\\\C=C/CCCCC)C([2H])([2H])OP([O-])(=O)OCC[N+](C)(C)C #> 30                                                                           [2H]C([2H])(OC(=O)CCCCCCCCCCCCCCCC)[C@@]([2H])(OC(=O)CCCCCCC\\\\C=C/CCCC)C([2H])([2H])OP([O-])(=O)OCC[NH3+] #> 31                                                                         [2H]C([2H])(OC(=O)CCCCCCCCCCCCCCCC)[C@@]([2H])(OC(=O)CCCCCCC\\\\C=C/CCCCCC)C([2H])([2H])OP([O-])(=O)OCC[NH3+] #> 32                                                                       [2H]C([2H])(OC(=O)CCCCCCCCCCCCCCCC)[C@@]([2H])(OC(=O)CCCCCCC\\\\C=C/CCCCCCCC)C([2H])([2H])OP([O-])(=O)OCC[NH3+] #> 33                                                             [2H]C([2H])(OC(=O)CCCCCCCCCCCCCCCC)[C@@]([2H])(OC(=O)CCCCCCCCC\\\\C=C/C\\\\C=C/C\\\\C=C/CC)C([2H])([2H])OP([O-])(=O)OCC[NH3+] #> 34                                                       [2H]C([2H])(OC(=O)CCCCCCCCCCCCCCCC)[C@@]([2H])(OC(=O)CCCCC\\\\C=C/C\\\\C=C/C\\\\C=C/C\\\\C=C/CCCCC)C([2H])([2H])OP([O-])(=O)OCC[NH3+] #> 35                                                                      [Na+].[2H]C([2H])(OC(=O)CCCCCCCCCCCCCCCC)[C@@]([2H])(OC(=O)CCCCCCC\\\\C=C/CCCC)C([2H])([2H])OP([O-])(=O)OCC(O)CO #> 36                                                                    [Na+].[2H]C([2H])(OC(=O)CCCCCCCCCCCCCCCC)[C@@]([2H])(OC(=O)CCCCCCC\\\\C=C/CCCCCC)C([2H])([2H])OP([O-])(=O)OCC(O)CO #> 37                                                                  [Na+].[2H]C([2H])(OC(=O)CCCCCCCCCCCCCCCC)[C@@]([2H])(OC(=O)CCCCCCC\\\\C=C/CCCCCCCC)C([2H])([2H])OP([O-])(=O)OCC(O)CO #> 38                                                        [Na+].[2H]C([2H])(OC(=O)CCCCCCCCCCCCCCCC)[C@@]([2H])(OC(=O)CCCCCCCCC\\\\C=C/C\\\\C=C/C\\\\C=C/CC)C([2H])([2H])OP([O-])(=O)OCC(O)CO #> 39                                                  [Na+].[2H]C([2H])(OC(=O)CCCCCCCCCCCCCCCC)[C@@]([2H])(OC(=O)CCCCC\\\\C=C/C\\\\C=C/C\\\\C=C/C\\\\C=C/CCCCC)C([2H])([2H])OP([O-])(=O)OCC(O)CO #> 40                                                   [Na+].[H][C@]([NH3+])(COP([O-])(=O)OC([2H])([2H])[C@]([2H])(OC(=O)CCCCCCC\\\\C=C/CCCC)C([2H])([2H])OC(=O)CCCCCCCCCCCCCCCC)C([O-])=O #> 41                                                 [Na+].[H][C@]([NH3+])(COP([O-])(=O)OC([2H])([2H])[C@]([2H])(OC(=O)CCCCCCC\\\\C=C/CCCCCC)C([2H])([2H])OC(=O)CCCCCCCCCCCCCCCC)C([O-])=O #> 42                                               [Na+].[H][C@]([NH3+])(COP([O-])(=O)OC([2H])([2H])[C@]([2H])(OC(=O)CCCCCCC\\\\C=C/CCCCCCCC)C([2H])([2H])OC(=O)CCCCCCCCCCCCCCCC)C([O-])=O #> 43                                     [Na+].[H][C@]([NH3+])(COP([O-])(=O)OC([2H])([2H])[C@]([2H])(OC(=O)CCCCCCCCC\\\\C=C/C\\\\C=C/C\\\\C=C/CC)C([2H])([2H])OC(=O)CCCCCCCCCCCCCCCC)C([O-])=O #> 44                               [Naa+].[H][C@]([NH3+])(COP([O-])(=O)OC([2H])([2H])[C@]([2H])(O)C([2H])([2H])OC(=O)CCCCCCCCCCCCCC)C([O-])=O #> 59                                                                         [Na+].[H][C@]([NH3+])(COP([O-])(=O)OC([2H])([2H])[C@]([2H])(O)C([2H])([2H])OC(=O)CCCCCCCCCCCCCCCC)C([O-])=O #> 60                                                                       [Na+].[H][C@]([NH3+])(COP([O-])(=O)OC([2H])([2H])[C@]([2H])(O)C([2H])([2H])OC(=O)CCCCCCCCCCCCCCCCCC)C([O-])=O #> 61                                                                                              [Na+].[2H]C([2H])(OC(=O)CCCCCCCCCCCCCC)[C@@]([2H])(O)C([2H])([2H])OP([O-])(=O)OCC(O)CO #> 62                                                                                            [Na+].[2H]C([2H])(OC(=O)CCCCCCCCCCCCCCCC)[C@@]([2H])(O)C([2H])([2H])OP([O-])(=O)OCC(O)CO #> 63                                                                                          [Nasmiles_metabolitemol_weight_salt exact_mass_metabolite conc #> 1          714.181              713.6582   25 #> 2          740.219              739.6738   50 #> 3          768.273              767.7051   75 #> 4          796.327              795.7364  100 #> 5          824.381              823.7677  125 #> 6          850.419              849.7834  100 #> 7          876.457              875.7990   75 #> 8          902.495              901.8147   50 #> 9          930.549              929.8460   25 #> 10         602.052              601.5815   25 #> 11         630.106              629.6128   50 #> 12         658.160              657.6441   75 #> 13         682.182              681.6441   50 #> 14         708.220              707.6598   25 #> 15         542.941              542.5404   75 #> 16         570.995              570.5717   50 #> 17         599.049              598.6030   25 #> 18         627.103              626.6343   50 #> 19         655.157              654.6656   75 #> 20         710.082              709.6084   75 #> 21         738.136              737.6397   50 #> 22         766.190              765.6710   25 #> 23         794.244              793.7023   50 #> 24         822.298              821.7336   75 #> 25         723.040              722.5622   50 #> 26         751.094              750.5935  100 #> 27         779.148              778.6248  150 #> 28         803.170              802.6248  100 #> 29         829.208              828.6405   50 #> 30         680.959              680.5153   25 #> 31         709.013              708.5466   50 #> 32         737.067              736.5779   75 #> 33         761.089              760.5779   50 #> 34         787.127              786.5935   25 #> 35         733.951              711.5099   25 #> 36         762.005              739.5412   50 #> 37         790.059              767.5725   75 #> 38         814.081              791.5725   50 #> 39         840.119              817.5881   25 #> 40         746.950              724.5051   25 #> 41         775.004              752.5364   50 #> 42         803.058              780.5677   75 #> 43         827.080              804.5677   50 #> 44         853.118              830.5834   25 #> 45         557.912              557.5068   25 #> 46         585.966              585.5381   50 #> 47         614.020              613.5694   75 #> 48         638.042              637.5694   50 #> 49         664.080              663.5850   25 #> 50         817.062              816.5525   25 #> 51         845.116              844.5838   50 #> 52         873.170              872.6151   75 #> 53         897.192              896.6151   50 #> 54         923.230              922.6307   25 #> 55         580.663              580.3384   25 #> 56         608.717              608.3697   50 #> 57         636.771              636.4010   25 #> 58         510.551              488.2911   25 #> 59         538.605              516.3224   50 #> 60         566.659              544.3537   25 #> 61         497.552              475.2959   25 #> 62         525.606              503.3272   50 #> 63         553.660              531.3585   25 #> 64         486.641              486.3482   25 #> 65         514.695              514.3795   50 #> 66         542.749              542.4108   25 #> 67         444.560              444.3013   25 #> 68         472.614              472.3326   50 #> 69         500.668              500.3639   25"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/isotopicSubstitutionMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Definitions of isotopic substitutions — isotopicSubstitutionMatrix","title":"Definitions of isotopic substitutions — isotopicSubstitutionMatrix","text":"order identify potential isotopologues based m/z intensity values isotopologues() function, sets pre-calculated parameters required. function returns parameter sets estimated different sources/databases. nomenclature used describe isotopes follows following convention: number neutrons provided [ prefix element number atoms element suffix. [13]C2[37]Cl3 describes thus isotopic substitution containing 2 [13]C isotopes 3 [37]Cl isotopes. row returned data.frame associated isotopic substitution (can involve isotopes several elements different isotopes element). general isotopic substitution multiple rows present data.frame. row provides parameters compute bounds (ratio isotopologue peak monoisotopic one) certain mass range. provided isotopic substitutions general frequently observed substitutions database (e.g. HMDB) defined. Parameters (columns) defined isotopic substitution : \"minmass\": minimal mass compound isotopic substitution found. Peaks mass lower likely respective isotopic substitution. \"maxmass\": maximal mass compound isotopic substitution found. Peaks mass higher likely respective isotopic substitution. \"md\": mass difference monoisotopic peak peak isotopologue characterized respective isotopic substitution. \"leftend\": left endpoint mass interval. \"rightend\": right endpoint mass interval. \"LBint\": intercept lower bound line mass interval whose endpoints \"leftend\" \"rightend\". \"LBslope\": slope lower bound line mass interval. \"UBint\": intercept upper bound line mass interval. \"UBslope\": slope upper bound line mass interval.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/isotopicSubstitutionMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Definitions of isotopic substitutions — isotopicSubstitutionMatrix","text":"","code":"isotopicSubstitutionMatrix(source = c(\"HMDB_NEUTRAL\"))"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/isotopicSubstitutionMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Definitions of isotopic substitutions — isotopicSubstitutionMatrix","text":"source character(1) defining set predefined parameters isotopologue definitions return.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/isotopicSubstitutionMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Definitions of isotopic substitutions — isotopicSubstitutionMatrix","text":"data.frame parameters detect defined isotopic substitutions","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/isotopicSubstitutionMatrix.html","id":"available-pre-calculated-substitution-matrices","dir":"Reference","previous_headings":"","what":"Available pre-calculated substitution matrices","title":"Definitions of isotopic substitutions — isotopicSubstitutionMatrix","text":"source = \"HMDB\": common isotopic substitutions parameters calculated compounds Human Metabolome Database (HMDB, July 2021). Note substitutions calculated neutral masses (.e. chemical formulas compounds, considering adducts).","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/isotopicSubstitutionMatrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Definitions of isotopic substitutions — isotopicSubstitutionMatrix","text":"Andrea Vicini","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/isotopicSubstitutionMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Definitions of isotopic substitutions — isotopicSubstitutionMatrix","text":"","code":"## Get the substitution matrix calculated on HMDB isotopicSubstitutionMatrix(\"HMDB_NEUTRAL\")"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/isotopologues.html","id":null,"dir":"Reference","previous_headings":"","what":"Identfying isotopologue peaks in MS data — isotopologues","title":"Identfying isotopologue peaks in MS data — isotopologues","text":"Given spectrum (.e. peak matrix m/z intensity values) function identifies groups potential isotopologue peaks based pre-defined mass differences intensity (probability) ratios need passed function substDefinition parameter. isotopic substitution compound determines certain isotopologue associated certain mass difference respect monoisotopic isotopologue. Also substitution compound linked certain ratio intensities peaks corresponding isotopologue monoisotopic one. ratio isotopologues corresponding isotopic substitution different compounds. substDefinition parameter provide upper lower values compute bounds isotopic substitution dependent peak's mass.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/isotopologues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identfying isotopologue peaks in MS data — isotopologues","text":"","code":"isotopologues(   x,   substDefinition = isotopicSubstitutionMatrix(),   tolerance = 0,   ppm = 20,   seedMz = numeric(),   charge = 1 )"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/isotopologues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identfying isotopologue peaks in MS data — isotopologues","text":"x matrix spectrum data (columns mz intensity). substDefinition matrix data.frame definition isotopic substitutions (columns \"name\" \"md\" among mandatory columns). rows matrix ordered column md increasing order. See isotopicSubstitutionMatrix() information format content. tolerance numeric(1) representing absolute tolerance relaxed matching m/z values peaks. See MsCoreUtils::closest() details. ppm numeric(1) representing relative, value-specific parts-per-million (PPM) tolerance relaxed matching m/z values peaks. See MsCoreUtils::closest() details. seedMz numeric vector ordered m/z values. provided, function checks peaks x m/z match . , looks groups first peak one matched ones. charge numeric(1) representing expected charge ionized compounds.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/isotopologues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identfying isotopologue peaks in MS data — isotopologues","text":"list integer vectors. integer vector contains indixes rows x potential isotopologues compound.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/isotopologues.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identfying isotopologue peaks in MS data — isotopologues","text":"function iterates peaks (rows) x. peak (assumed monoisotopic peak) searches peaks x difference mass matching (given ppm tolerance) pre-defined mass differences substDefinitions (column \"md\"). mass obtained multiplying m/z peaks charge expected ionized compounds. matching peaks, function next evaluates whether intensity within expected (pre-defined) intensity range. Using \"LBint\", \"LBslope\", \"UBint\", \"UBslope\" previously matched isotopic substitution substDefinition, function estimates (mass dependent) lower upper intensity ratio limit based peak's mass. peaks grouped together indexes excluded set indexes searched groups (.e. peaks already assigned isotopologue group considered/tested thus peak can part one isotopologue group).","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/isotopologues.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Identfying isotopologue peaks in MS data — isotopologues","text":"Andrea Vicini","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/isotopologues.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identfying isotopologue peaks in MS data — isotopologues","text":"","code":"## Read theoretical isotope pattern (high resolution) from example file x <- read.table(system.file(\"exampleSpectra\",     \"serine-alpha-lactose-caffeine.txt\", package = \"MetaboCoreUtils\"),     header = TRUE) x <- x[order(x$mz), ] plot(x$mz, x$intensity, type = \"h\")  isos <- isotopologues(x, ppm = 5) isos #> [[1]] #> [1] 1 2 3 4 5 6 #>  #> [[2]] #> [1]  7  8  9 10 11 12 13 14 #>  #> [[3]] #> [1] 15 16 17 18 20 21 24 #>  #> [[4]] #> [1] 19 23 #>   ## highlight them in the plot for (i in seq_along(isos)) {     z <- isos[[i]]     points(x$mz[z], x$intensity[z], col = i + 1) }"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/mass2mz.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate mass-to-charge ratio — mass2mz","title":"Calculate mass-to-charge ratio — mass2mz","text":"mass2mz calculates m/z value neutral mass adduct definition. Custom adduct definitions can passed adduct parameter form data.frame. data.frame expected columns \"mass_add\" \"mass_multi\" defining additive multiplicative part calculation. See adducts() examples.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/mass2mz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate mass-to-charge ratio — mass2mz","text":"","code":"mass2mz(x, adduct = \"[M+H]+\")"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/mass2mz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate mass-to-charge ratio — mass2mz","text":"x numeric neutral mass adduct m/z shall calculated. adduct either character specifying name(s) adduct(s) m/z calculated data.frame adduct definition. See adductNames() supported adduct names description information expected format data.frame provided.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/mass2mz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate mass-to-charge ratio — mass2mz","text":"numeric matrix number rows elements x number columns equal length adduct (adduct names used column names). column thus represents m/z x defined adduct.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/mass2mz.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate mass-to-charge ratio — mass2mz","text":"Michael Witting, Johannes Rainer","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/mass2mz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate mass-to-charge ratio — mass2mz","text":"","code":"exact_mass <- c(100, 200, 250) adduct <- \"[M+H]+\"  ## Calculate m/z of [M+H]+ adduct from neutral mass mass2mz(exact_mass, adduct) #>        [M+H]+ #> [1,] 101.0073 #> [2,] 201.0073 #> [3,] 251.0073  exact_mass <- 100 adduct <- \"[M+Na]+\"  ## Calculate m/z of [M+Na]+ adduct from neutral mass mass2mz(exact_mass, adduct) #>       [M+Na]+ #> [1,] 122.9892  ## Calculate m/z of multiple adducts from neutral mass mass2mz(exact_mass, adduct = adductNames()) #>      [M+3H]3+ [M+2H+Na]3+ [M+H+Na2]3+ [M+Na3]3+ [M+2H]2+ [M+H+NH4]2+ [M+H+K]2+ #> [1,] 34.34061    41.66792    48.99524  56.32255 51.00728    59.52055  69.98522 #>      [M+H+Na]2+ [M+C2H3N+2H]2+ [M+2Na]2+ [M+C4H6N2+2H]2+ [M+C6H9N3+2H]2+ #> [1,]   61.99825       71.52055  72.98922        92.03383        112.5471 #>        [M+H]+  [M+Li]+ [M+2Li-H]+ [M+NH4]+ [M+H2O+H]+  [M+Na]+ [M+CH4O+H]+ #> [1,] 101.0073 107.0155   113.0236 118.0338   119.0178 122.9892    133.0335 #>        [M+K]+ [M+C2H3N+H]+ [M+2Na-H]+ [M+C3H8O+H]+ [M+C2H3N+Na]+ [M+2K-H]+ #> [1,] 138.9632     142.0338   144.9712     161.0648      164.0158   176.919 #>      [M+C2H6OS+H]+ [M+C4H6N2+H]+  [2M+H]+ [2M+NH4]+ [2M+Na]+  [2M+K]+ #> [1,]      179.0212      183.0604 201.0073  218.0338 222.9892 238.9632 #>      [2M+C2H3N+H]+ [2M+C2H3N+Na]+  [3M+H]+ [M+H-NH3]+ [M+H-H2O]+ #> [1,]      242.0338       264.0158 301.0073   83.98073   82.99671 #>      [M+H-Hexose-H2O]+ [M+H-H4O2]+ [M+H-CH2O2]+ [M]+ #> [1,]         -61.04555    64.98615      55.0018  100  ## Provide a custom adduct definition. adds <- data.frame(mass_add = c(1, 2, 3), mass_multi = c(1, 2, 0.5)) rownames(adds) <- c(\"a\", \"b\", \"c\") mass2mz(c(100, 200), adds) #>        a   b   c #> [1,] 101 202  53 #> [2,] 201 402 103"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/multiplyElements.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiply chemical formulas by a scalar — multiplyElements","title":"Multiply chemical formulas by a scalar — multiplyElements","text":"multiplyElements Multiply number atoms element constant, positive, integer","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/multiplyElements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiply chemical formulas by a scalar — multiplyElements","text":"","code":"multiplyElements(x, k)"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/multiplyElements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiply chemical formulas by a scalar — multiplyElements","text":"x character strings chemical formula k numeric(1) positive integer formula multiplied.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/multiplyElements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiply chemical formulas by a scalar — multiplyElements","text":"character strings standardized chemical formula.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/multiplyElements.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Multiply chemical formulas by a scalar — multiplyElements","text":"Roger Gine","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/multiplyElements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multiply chemical formulas by a scalar — multiplyElements","text":"","code":"multiplyElements(\"H2O\", 3) #> [1] \"H6O3\"  multiplyElements(c(\"C6H12O6\", \"Na\", \"CH4O\"), 2) #> [1] \"C12H24O12\" \"Na2\"       \"C2H8O2\""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/mz2mass.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate neutral mass — mz2mass","title":"Calculate neutral mass — mz2mass","text":"mz2mass calculates neutral mass given m/z value adduct definition. Custom adduct definitions can passed adduct parameter form data.frame. data.frame expected columns \"mass_add\" \"mass_multi\" defining additive multiplicative part calculation. See adducts() examples.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/mz2mass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate neutral mass — mz2mass","text":"","code":"mz2mass(x, adduct = \"[M+H]+\")"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/mz2mass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate neutral mass — mz2mass","text":"x numeric m/z value neutral mass shall calculated. adduct either character specifying name(s) adduct(s) m/z calculated data.frame adduct definition. See adductNames() supported adduct names description information expected format data.frame provided.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/mz2mass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate neutral mass — mz2mass","text":"numeric matrix number rows elements x number columns equal length adduct (adduct names used column names. column thus represents neutral mass x defined adduct.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/mz2mass.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate neutral mass — mz2mass","text":"Michael Witting, Johannes Rainer","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/mz2mass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate neutral mass — mz2mass","text":"","code":"ion_mass <- c(100, 200, 300) adduct <- \"[M+H]+\"  ## Calculate m/z of [M+H]+ adduct from neutral mass mz2mass(ion_mass, adduct) #>         [M+H]+ #> [1,]  98.99272 #> [2,] 198.99272 #> [3,] 298.99272  ion_mass <- 100 adduct <- \"[M+Na]+\"  ## Calculate m/z of [M+Na]+ adduct from neutral mass mz2mass(ion_mass, adduct) #>       [M+Na]+ #> [1,] 77.01078  ## Provide a custom adduct definition. adds <- data.frame(mass_add = c(1, 2, 3), mass_multi = c(1, 2, 0.5)) rownames(adds) <- c(\"a\", \"b\", \"c\") mz2mass(c(100, 200), adds) #>        a  b   c #> [1,]  99 49 194 #> [2,] 199 99 394"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/pasteElements.html","id":null,"dir":"Reference","previous_headings":"","what":"Create chemical formula from a named vector — pasteElements","title":"Create chemical formula from a named vector — pasteElements","text":"pasteElements creates chemical formula element counts (returned countElements()).","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/pasteElements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create chemical formula from a named vector — pasteElements","text":"","code":"pasteElements(x)"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/pasteElements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create chemical formula from a named vector — pasteElements","text":"x list/integer element counts, names individual elements.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/pasteElements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create chemical formula from a named vector — pasteElements","text":"character() chemical formulas.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/pasteElements.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create chemical formula from a named vector — pasteElements","text":"Michael Witting Sebastian Gibb","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/pasteElements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create chemical formula from a named vector — pasteElements","text":"","code":"elements <- c(\"C\" = 6, \"H\" = 12, \"O\" = 6) pasteElements(elements) #> [1] \"C6H12O6\""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/standardizeFormula.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize a chemical formula — standardizeFormula","title":"Standardize a chemical formula — standardizeFormula","text":"standardizeFormula standardizes supplied chemical formula according Hill notation system.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/standardizeFormula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize a chemical formula — standardizeFormula","text":"","code":"standardizeFormula(x)"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/standardizeFormula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize a chemical formula — standardizeFormula","text":"x character, strings chemical formula standardize.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/standardizeFormula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize a chemical formula — standardizeFormula","text":"character strings standardized chemical formula.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/standardizeFormula.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Standardize a chemical formula — standardizeFormula","text":"Michael Witting Sebastian Gibb","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/standardizeFormula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardize a chemical formula — standardizeFormula","text":"","code":"standardizeFormula(\"C6O6H12\") #>   C6O6H12  #> \"C6H12O6\""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/subtractElements.html","id":null,"dir":"Reference","previous_headings":"","what":"subtract two chemical formula — subtractElements","title":"subtract two chemical formula — subtractElements","text":"subtractElements subtracts one chemical formula another.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/subtractElements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"subtract two chemical formula — subtractElements","text":"","code":"subtractElements(x, y)"},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/subtractElements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"subtract two chemical formula — subtractElements","text":"x character strings chemical formula y character strings chemical formula subtracted x","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/subtractElements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"subtract two chemical formula — subtractElements","text":"character Resulting formula","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/subtractElements.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"subtract two chemical formula — subtractElements","text":"Michael Witting Sebastian Gibb","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/reference/subtractElements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"subtract two chemical formula — subtractElements","text":"","code":"subtractElements(\"C6H12O6\", \"H2O\") #> [1] \"C6H10O5\"  subtractElements(\"C6H12O6\", \"NH3\") #> [1] NA"},{"path":[]},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/news/index.html","id":"metabocoreutils-1-9","dir":"Changelog","previous_headings":"","what":"MetaboCoreUtils 1.9.2","title":"MetaboCoreUtils 1.9","text":"countElements returns NA invalid elements instead silently dropping ( PR #65).","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/news/index.html","id":"metabocoreutils-1-9-1","dir":"Changelog","previous_headings":"","what":"MetaboCoreUtils 1.9.1","title":"MetaboCoreUtils 1.9","text":"countElements, subtractElements addElements returns NA input arguments NA (issue #61, PR #62).","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/news/index.html","id":"metabocoreutils-1-5","dir":"Changelog","previous_headings":"","what":"MetaboCoreUtils 1.5.2","title":"MetaboCoreUtils 1.5","text":"substractElements drops elements zero counts (issue #57).","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/news/index.html","id":"metabocoreutils-1-5-1","dir":"Changelog","previous_headings":"","what":"MetaboCoreUtils 1.5.1","title":"MetaboCoreUtils 1.5","text":"Add functions formula2mz, adductFormula multiplyElements (issue #55).","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/news/index.html","id":"metabocoreutils-1-3","dir":"Changelog","previous_headings":"","what":"MetaboCoreUtils 1.3.8","title":"MetaboCoreutils 1.3","text":"Support heavy isotopes countElements/pasteElements/calculateMass (issue #53).","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/news/index.html","id":"metabocoreutils-1-3-1","dir":"Changelog","previous_headings":"","what":"MetaboCoreUtils 1.3.7","title":"MetaboCoreutils 1.3","text":"Fix bug containsElements function (issue #51).","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/news/index.html","id":"metabocoreutils-1-3-2","dir":"Changelog","previous_headings":"","what":"MetaboCoreUtils 1.3.6","title":"MetaboCoreutils 1.3","text":"Add functions Kendrick mass defects.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/news/index.html","id":"metabocoreutils-1-3-3","dir":"Changelog","previous_headings":"","what":"MetaboCoreUtils 1.3.5","title":"MetaboCoreutils 1.3","text":"Add missing unit tests.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/news/index.html","id":"metabocoreutils-1-3-4","dir":"Changelog","previous_headings":"","what":"MetaboCoreUtils 1.3.4","title":"MetaboCoreutils 1.3","text":"Add calculateMass function.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/news/index.html","id":"metabocoreutils-1-3-5","dir":"Changelog","previous_headings":"","what":"MetaboCoreUtils 1.3.3","title":"MetaboCoreutils 1.3","text":"Vectorized versions chemical mass functions.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/news/index.html","id":"metabocoreutils-1-3-6","dir":"Changelog","previous_headings":"","what":"MetaboCoreUtils 1.3.2","title":"MetaboCoreutils 1.3","text":"Function conversion migration time effective mobility CE-MS.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/news/index.html","id":"metabocoreutils-1-3-7","dir":"Changelog","previous_headings":"","what":"MetaboCoreUtils 1.3.1","title":"MetaboCoreutils 1.3","text":"Add isotope detection functionality.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/news/index.html","id":"metabocoreutils-1-1","dir":"Changelog","previous_headings":"","what":"MetaboCoreUtils 1.1.3","title":"MetaboCoreutils 1.1","text":"Add isotope detection functionality.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/news/index.html","id":"metabocoreutils-1-1-1","dir":"Changelog","previous_headings":"","what":"MetaboCoreUtils 1.1.2","title":"MetaboCoreutils 1.1","text":"Add already charged adduct/ion adduct definition.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/news/index.html","id":"metabocoreutils-1-1-2","dir":"Changelog","previous_headings":"","what":"MetaboCoreUtils 1.1.1","title":"MetaboCoreutils 1.1","text":"Add correctRindex function. Add isotopologue function group isotopologues MS spectra.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/news/index.html","id":"metabocoreutils-0-99","dir":"Changelog","previous_headings":"","what":"MetaboCoreUtils 0.99.1","title":"MetaboCoreutils 0.99","text":"Add [M+H-2(H2O)]+ adduct definition.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/news/index.html","id":"metabocoreutils-0-99-1","dir":"Changelog","previous_headings":"","what":"MetaboCoreUtils 0.99.0","title":"MetaboCoreutils 0.99","text":"Add package vignette prepare Bioconductor submission.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/news/index.html","id":"metabocoreutils-0-0","dir":"Changelog","previous_headings":"","what":"MetaboCoreUtils 0.0.3","title":"MetaboCoreutils 0.0","text":"Add internalStandards internalStandardsNames functions.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/news/index.html","id":"metabocoreutils-0-0-1","dir":"Changelog","previous_headings":"","what":"MetaboCoreUtils 0.0.3","title":"MetaboCoreutils 0.0","text":"Refactor mass2mz mz2mass support calculation multiple adducts multiple input values well user defined adduct definition. Add functions adducts return data.frame (built-) adduct definitions.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/news/index.html","id":"metabocoreutils-0-0-2","dir":"Changelog","previous_headings":"","what":"MetaboCoreUtils 0.0.2","title":"MetaboCoreutils 0.0","text":"Vectorize mass2mz mz2mass additional performance improvement.","code":""},{"path":"https://rformassspectrometry.github.io/MetaboCoreUtils/news/index.html","id":"metabocoreutils-0-0-3","dir":"Changelog","previous_headings":"","what":"MetaboCoreUtils 0.0.1","title":"MetaboCoreutils 0.0","text":"Add utility functions work chemical formulas: pasteElements, countElements standardizeFormula. Add utility functions convert m/z monoisotopic masses based provided ion adduct information.","code":""}]
